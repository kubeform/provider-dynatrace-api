/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package versioned

import (
	"fmt"

	alertingv1alpha1 "kubeform.dev/provider-dynatrace-api/client/clientset/versioned/typed/alerting/v1alpha1"
	applicationv1alpha1 "kubeform.dev/provider-dynatrace-api/client/clientset/versioned/typed/application/v1alpha1"
	autotagv1alpha1 "kubeform.dev/provider-dynatrace-api/client/clientset/versioned/typed/autotag/v1alpha1"
	awsv1alpha1 "kubeform.dev/provider-dynatrace-api/client/clientset/versioned/typed/aws/v1alpha1"
	azurev1alpha1 "kubeform.dev/provider-dynatrace-api/client/clientset/versioned/typed/azure/v1alpha1"
	calculatedv1alpha1 "kubeform.dev/provider-dynatrace-api/client/clientset/versioned/typed/calculated/v1alpha1"
	customv1alpha1 "kubeform.dev/provider-dynatrace-api/client/clientset/versioned/typed/custom/v1alpha1"
	dashboardv1alpha1 "kubeform.dev/provider-dynatrace-api/client/clientset/versioned/typed/dashboard/v1alpha1"
	databasev1alpha1 "kubeform.dev/provider-dynatrace-api/client/clientset/versioned/typed/database/v1alpha1"
	diskv1alpha1 "kubeform.dev/provider-dynatrace-api/client/clientset/versioned/typed/disk/v1alpha1"
	hostv1alpha1 "kubeform.dev/provider-dynatrace-api/client/clientset/versioned/typed/host/v1alpha1"
	k8sv1alpha1 "kubeform.dev/provider-dynatrace-api/client/clientset/versioned/typed/k8s/v1alpha1"
	maintenancev1alpha1 "kubeform.dev/provider-dynatrace-api/client/clientset/versioned/typed/maintenance/v1alpha1"
	managementv1alpha1 "kubeform.dev/provider-dynatrace-api/client/clientset/versioned/typed/management/v1alpha1"
	notificationv1alpha1 "kubeform.dev/provider-dynatrace-api/client/clientset/versioned/typed/notification/v1alpha1"
	processgroupv1alpha1 "kubeform.dev/provider-dynatrace-api/client/clientset/versioned/typed/processgroup/v1alpha1"
	requestv1alpha1 "kubeform.dev/provider-dynatrace-api/client/clientset/versioned/typed/request/v1alpha1"
	resourcev1alpha1 "kubeform.dev/provider-dynatrace-api/client/clientset/versioned/typed/resource/v1alpha1"
	servicev1alpha1 "kubeform.dev/provider-dynatrace-api/client/clientset/versioned/typed/service/v1alpha1"
	slov1alpha1 "kubeform.dev/provider-dynatrace-api/client/clientset/versioned/typed/slo/v1alpha1"
	spanv1alpha1 "kubeform.dev/provider-dynatrace-api/client/clientset/versioned/typed/span/v1alpha1"

	discovery "k8s.io/client-go/discovery"
	rest "k8s.io/client-go/rest"
	flowcontrol "k8s.io/client-go/util/flowcontrol"
)

type Interface interface {
	Discovery() discovery.DiscoveryInterface
	AlertingV1alpha1() alertingv1alpha1.AlertingV1alpha1Interface
	ApplicationV1alpha1() applicationv1alpha1.ApplicationV1alpha1Interface
	AutotagV1alpha1() autotagv1alpha1.AutotagV1alpha1Interface
	AwsV1alpha1() awsv1alpha1.AwsV1alpha1Interface
	AzureV1alpha1() azurev1alpha1.AzureV1alpha1Interface
	CalculatedV1alpha1() calculatedv1alpha1.CalculatedV1alpha1Interface
	CustomV1alpha1() customv1alpha1.CustomV1alpha1Interface
	DashboardV1alpha1() dashboardv1alpha1.DashboardV1alpha1Interface
	DatabaseV1alpha1() databasev1alpha1.DatabaseV1alpha1Interface
	DiskV1alpha1() diskv1alpha1.DiskV1alpha1Interface
	HostV1alpha1() hostv1alpha1.HostV1alpha1Interface
	K8sV1alpha1() k8sv1alpha1.K8sV1alpha1Interface
	MaintenanceV1alpha1() maintenancev1alpha1.MaintenanceV1alpha1Interface
	ManagementV1alpha1() managementv1alpha1.ManagementV1alpha1Interface
	NotificationV1alpha1() notificationv1alpha1.NotificationV1alpha1Interface
	ProcessgroupV1alpha1() processgroupv1alpha1.ProcessgroupV1alpha1Interface
	RequestV1alpha1() requestv1alpha1.RequestV1alpha1Interface
	ResourceV1alpha1() resourcev1alpha1.ResourceV1alpha1Interface
	ServiceV1alpha1() servicev1alpha1.ServiceV1alpha1Interface
	SloV1alpha1() slov1alpha1.SloV1alpha1Interface
	SpanV1alpha1() spanv1alpha1.SpanV1alpha1Interface
}

// Clientset contains the clients for groups. Each group has exactly one
// version included in a Clientset.
type Clientset struct {
	*discovery.DiscoveryClient
	alertingV1alpha1     *alertingv1alpha1.AlertingV1alpha1Client
	applicationV1alpha1  *applicationv1alpha1.ApplicationV1alpha1Client
	autotagV1alpha1      *autotagv1alpha1.AutotagV1alpha1Client
	awsV1alpha1          *awsv1alpha1.AwsV1alpha1Client
	azureV1alpha1        *azurev1alpha1.AzureV1alpha1Client
	calculatedV1alpha1   *calculatedv1alpha1.CalculatedV1alpha1Client
	customV1alpha1       *customv1alpha1.CustomV1alpha1Client
	dashboardV1alpha1    *dashboardv1alpha1.DashboardV1alpha1Client
	databaseV1alpha1     *databasev1alpha1.DatabaseV1alpha1Client
	diskV1alpha1         *diskv1alpha1.DiskV1alpha1Client
	hostV1alpha1         *hostv1alpha1.HostV1alpha1Client
	k8sV1alpha1          *k8sv1alpha1.K8sV1alpha1Client
	maintenanceV1alpha1  *maintenancev1alpha1.MaintenanceV1alpha1Client
	managementV1alpha1   *managementv1alpha1.ManagementV1alpha1Client
	notificationV1alpha1 *notificationv1alpha1.NotificationV1alpha1Client
	processgroupV1alpha1 *processgroupv1alpha1.ProcessgroupV1alpha1Client
	requestV1alpha1      *requestv1alpha1.RequestV1alpha1Client
	resourceV1alpha1     *resourcev1alpha1.ResourceV1alpha1Client
	serviceV1alpha1      *servicev1alpha1.ServiceV1alpha1Client
	sloV1alpha1          *slov1alpha1.SloV1alpha1Client
	spanV1alpha1         *spanv1alpha1.SpanV1alpha1Client
}

// AlertingV1alpha1 retrieves the AlertingV1alpha1Client
func (c *Clientset) AlertingV1alpha1() alertingv1alpha1.AlertingV1alpha1Interface {
	return c.alertingV1alpha1
}

// ApplicationV1alpha1 retrieves the ApplicationV1alpha1Client
func (c *Clientset) ApplicationV1alpha1() applicationv1alpha1.ApplicationV1alpha1Interface {
	return c.applicationV1alpha1
}

// AutotagV1alpha1 retrieves the AutotagV1alpha1Client
func (c *Clientset) AutotagV1alpha1() autotagv1alpha1.AutotagV1alpha1Interface {
	return c.autotagV1alpha1
}

// AwsV1alpha1 retrieves the AwsV1alpha1Client
func (c *Clientset) AwsV1alpha1() awsv1alpha1.AwsV1alpha1Interface {
	return c.awsV1alpha1
}

// AzureV1alpha1 retrieves the AzureV1alpha1Client
func (c *Clientset) AzureV1alpha1() azurev1alpha1.AzureV1alpha1Interface {
	return c.azureV1alpha1
}

// CalculatedV1alpha1 retrieves the CalculatedV1alpha1Client
func (c *Clientset) CalculatedV1alpha1() calculatedv1alpha1.CalculatedV1alpha1Interface {
	return c.calculatedV1alpha1
}

// CustomV1alpha1 retrieves the CustomV1alpha1Client
func (c *Clientset) CustomV1alpha1() customv1alpha1.CustomV1alpha1Interface {
	return c.customV1alpha1
}

// DashboardV1alpha1 retrieves the DashboardV1alpha1Client
func (c *Clientset) DashboardV1alpha1() dashboardv1alpha1.DashboardV1alpha1Interface {
	return c.dashboardV1alpha1
}

// DatabaseV1alpha1 retrieves the DatabaseV1alpha1Client
func (c *Clientset) DatabaseV1alpha1() databasev1alpha1.DatabaseV1alpha1Interface {
	return c.databaseV1alpha1
}

// DiskV1alpha1 retrieves the DiskV1alpha1Client
func (c *Clientset) DiskV1alpha1() diskv1alpha1.DiskV1alpha1Interface {
	return c.diskV1alpha1
}

// HostV1alpha1 retrieves the HostV1alpha1Client
func (c *Clientset) HostV1alpha1() hostv1alpha1.HostV1alpha1Interface {
	return c.hostV1alpha1
}

// K8sV1alpha1 retrieves the K8sV1alpha1Client
func (c *Clientset) K8sV1alpha1() k8sv1alpha1.K8sV1alpha1Interface {
	return c.k8sV1alpha1
}

// MaintenanceV1alpha1 retrieves the MaintenanceV1alpha1Client
func (c *Clientset) MaintenanceV1alpha1() maintenancev1alpha1.MaintenanceV1alpha1Interface {
	return c.maintenanceV1alpha1
}

// ManagementV1alpha1 retrieves the ManagementV1alpha1Client
func (c *Clientset) ManagementV1alpha1() managementv1alpha1.ManagementV1alpha1Interface {
	return c.managementV1alpha1
}

// NotificationV1alpha1 retrieves the NotificationV1alpha1Client
func (c *Clientset) NotificationV1alpha1() notificationv1alpha1.NotificationV1alpha1Interface {
	return c.notificationV1alpha1
}

// ProcessgroupV1alpha1 retrieves the ProcessgroupV1alpha1Client
func (c *Clientset) ProcessgroupV1alpha1() processgroupv1alpha1.ProcessgroupV1alpha1Interface {
	return c.processgroupV1alpha1
}

// RequestV1alpha1 retrieves the RequestV1alpha1Client
func (c *Clientset) RequestV1alpha1() requestv1alpha1.RequestV1alpha1Interface {
	return c.requestV1alpha1
}

// ResourceV1alpha1 retrieves the ResourceV1alpha1Client
func (c *Clientset) ResourceV1alpha1() resourcev1alpha1.ResourceV1alpha1Interface {
	return c.resourceV1alpha1
}

// ServiceV1alpha1 retrieves the ServiceV1alpha1Client
func (c *Clientset) ServiceV1alpha1() servicev1alpha1.ServiceV1alpha1Interface {
	return c.serviceV1alpha1
}

// SloV1alpha1 retrieves the SloV1alpha1Client
func (c *Clientset) SloV1alpha1() slov1alpha1.SloV1alpha1Interface {
	return c.sloV1alpha1
}

// SpanV1alpha1 retrieves the SpanV1alpha1Client
func (c *Clientset) SpanV1alpha1() spanv1alpha1.SpanV1alpha1Interface {
	return c.spanV1alpha1
}

// Discovery retrieves the DiscoveryClient
func (c *Clientset) Discovery() discovery.DiscoveryInterface {
	if c == nil {
		return nil
	}
	return c.DiscoveryClient
}

// NewForConfig creates a new Clientset for the given config.
// If config's RateLimiter is not set and QPS and Burst are acceptable,
// NewForConfig will generate a rate-limiter in configShallowCopy.
func NewForConfig(c *rest.Config) (*Clientset, error) {
	configShallowCopy := *c
	if configShallowCopy.RateLimiter == nil && configShallowCopy.QPS > 0 {
		if configShallowCopy.Burst <= 0 {
			return nil, fmt.Errorf("burst is required to be greater than 0 when RateLimiter is not set and QPS is set to greater than 0")
		}
		configShallowCopy.RateLimiter = flowcontrol.NewTokenBucketRateLimiter(configShallowCopy.QPS, configShallowCopy.Burst)
	}
	var cs Clientset
	var err error
	cs.alertingV1alpha1, err = alertingv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.applicationV1alpha1, err = applicationv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.autotagV1alpha1, err = autotagv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.awsV1alpha1, err = awsv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.azureV1alpha1, err = azurev1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.calculatedV1alpha1, err = calculatedv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.customV1alpha1, err = customv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.dashboardV1alpha1, err = dashboardv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.databaseV1alpha1, err = databasev1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.diskV1alpha1, err = diskv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.hostV1alpha1, err = hostv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.k8sV1alpha1, err = k8sv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.maintenanceV1alpha1, err = maintenancev1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.managementV1alpha1, err = managementv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.notificationV1alpha1, err = notificationv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.processgroupV1alpha1, err = processgroupv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.requestV1alpha1, err = requestv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.resourceV1alpha1, err = resourcev1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.serviceV1alpha1, err = servicev1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.sloV1alpha1, err = slov1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.spanV1alpha1, err = spanv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}

	cs.DiscoveryClient, err = discovery.NewDiscoveryClientForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	return &cs, nil
}

// NewForConfigOrDie creates a new Clientset for the given config and
// panics if there is an error in the config.
func NewForConfigOrDie(c *rest.Config) *Clientset {
	var cs Clientset
	cs.alertingV1alpha1 = alertingv1alpha1.NewForConfigOrDie(c)
	cs.applicationV1alpha1 = applicationv1alpha1.NewForConfigOrDie(c)
	cs.autotagV1alpha1 = autotagv1alpha1.NewForConfigOrDie(c)
	cs.awsV1alpha1 = awsv1alpha1.NewForConfigOrDie(c)
	cs.azureV1alpha1 = azurev1alpha1.NewForConfigOrDie(c)
	cs.calculatedV1alpha1 = calculatedv1alpha1.NewForConfigOrDie(c)
	cs.customV1alpha1 = customv1alpha1.NewForConfigOrDie(c)
	cs.dashboardV1alpha1 = dashboardv1alpha1.NewForConfigOrDie(c)
	cs.databaseV1alpha1 = databasev1alpha1.NewForConfigOrDie(c)
	cs.diskV1alpha1 = diskv1alpha1.NewForConfigOrDie(c)
	cs.hostV1alpha1 = hostv1alpha1.NewForConfigOrDie(c)
	cs.k8sV1alpha1 = k8sv1alpha1.NewForConfigOrDie(c)
	cs.maintenanceV1alpha1 = maintenancev1alpha1.NewForConfigOrDie(c)
	cs.managementV1alpha1 = managementv1alpha1.NewForConfigOrDie(c)
	cs.notificationV1alpha1 = notificationv1alpha1.NewForConfigOrDie(c)
	cs.processgroupV1alpha1 = processgroupv1alpha1.NewForConfigOrDie(c)
	cs.requestV1alpha1 = requestv1alpha1.NewForConfigOrDie(c)
	cs.resourceV1alpha1 = resourcev1alpha1.NewForConfigOrDie(c)
	cs.serviceV1alpha1 = servicev1alpha1.NewForConfigOrDie(c)
	cs.sloV1alpha1 = slov1alpha1.NewForConfigOrDie(c)
	cs.spanV1alpha1 = spanv1alpha1.NewForConfigOrDie(c)

	cs.DiscoveryClient = discovery.NewDiscoveryClientForConfigOrDie(c)
	return &cs
}

// New creates a new Clientset for the given RESTClient.
func New(c rest.Interface) *Clientset {
	var cs Clientset
	cs.alertingV1alpha1 = alertingv1alpha1.New(c)
	cs.applicationV1alpha1 = applicationv1alpha1.New(c)
	cs.autotagV1alpha1 = autotagv1alpha1.New(c)
	cs.awsV1alpha1 = awsv1alpha1.New(c)
	cs.azureV1alpha1 = azurev1alpha1.New(c)
	cs.calculatedV1alpha1 = calculatedv1alpha1.New(c)
	cs.customV1alpha1 = customv1alpha1.New(c)
	cs.dashboardV1alpha1 = dashboardv1alpha1.New(c)
	cs.databaseV1alpha1 = databasev1alpha1.New(c)
	cs.diskV1alpha1 = diskv1alpha1.New(c)
	cs.hostV1alpha1 = hostv1alpha1.New(c)
	cs.k8sV1alpha1 = k8sv1alpha1.New(c)
	cs.maintenanceV1alpha1 = maintenancev1alpha1.New(c)
	cs.managementV1alpha1 = managementv1alpha1.New(c)
	cs.notificationV1alpha1 = notificationv1alpha1.New(c)
	cs.processgroupV1alpha1 = processgroupv1alpha1.New(c)
	cs.requestV1alpha1 = requestv1alpha1.New(c)
	cs.resourceV1alpha1 = resourcev1alpha1.New(c)
	cs.serviceV1alpha1 = servicev1alpha1.New(c)
	cs.sloV1alpha1 = slov1alpha1.New(c)
	cs.spanV1alpha1 = spanv1alpha1.New(c)

	cs.DiscoveryClient = discovery.NewDiscoveryClient(c)
	return &cs
}
