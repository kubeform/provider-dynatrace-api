/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-dynatrace-api/apis/span/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// EntryPointLister helps list EntryPoints.
// All objects returned here must be treated as read-only.
type EntryPointLister interface {
	// List lists all EntryPoints in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.EntryPoint, err error)
	// EntryPoints returns an object that can list and get EntryPoints.
	EntryPoints(namespace string) EntryPointNamespaceLister
	EntryPointListerExpansion
}

// entryPointLister implements the EntryPointLister interface.
type entryPointLister struct {
	indexer cache.Indexer
}

// NewEntryPointLister returns a new EntryPointLister.
func NewEntryPointLister(indexer cache.Indexer) EntryPointLister {
	return &entryPointLister{indexer: indexer}
}

// List lists all EntryPoints in the indexer.
func (s *entryPointLister) List(selector labels.Selector) (ret []*v1alpha1.EntryPoint, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EntryPoint))
	})
	return ret, err
}

// EntryPoints returns an object that can list and get EntryPoints.
func (s *entryPointLister) EntryPoints(namespace string) EntryPointNamespaceLister {
	return entryPointNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// EntryPointNamespaceLister helps list and get EntryPoints.
// All objects returned here must be treated as read-only.
type EntryPointNamespaceLister interface {
	// List lists all EntryPoints in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.EntryPoint, err error)
	// Get retrieves the EntryPoint from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.EntryPoint, error)
	EntryPointNamespaceListerExpansion
}

// entryPointNamespaceLister implements the EntryPointNamespaceLister
// interface.
type entryPointNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all EntryPoints in the indexer for a given namespace.
func (s entryPointNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.EntryPoint, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EntryPoint))
	})
	return ret, err
}

// Get retrieves the EntryPoint from the indexer for a given namespace and name.
func (s entryPointNamespaceLister) Get(name string) (*v1alpha1.EntryPoint, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("entrypoint"), name)
	}
	return obj.(*v1alpha1.EntryPoint), nil
}
