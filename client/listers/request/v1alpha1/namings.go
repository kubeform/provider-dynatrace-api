/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-dynatrace-api/apis/request/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NamingsLister helps list Namingses.
// All objects returned here must be treated as read-only.
type NamingsLister interface {
	// List lists all Namingses in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Namings, err error)
	// Namingses returns an object that can list and get Namingses.
	Namingses(namespace string) NamingsNamespaceLister
	NamingsListerExpansion
}

// namingsLister implements the NamingsLister interface.
type namingsLister struct {
	indexer cache.Indexer
}

// NewNamingsLister returns a new NamingsLister.
func NewNamingsLister(indexer cache.Indexer) NamingsLister {
	return &namingsLister{indexer: indexer}
}

// List lists all Namingses in the indexer.
func (s *namingsLister) List(selector labels.Selector) (ret []*v1alpha1.Namings, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Namings))
	})
	return ret, err
}

// Namingses returns an object that can list and get Namingses.
func (s *namingsLister) Namingses(namespace string) NamingsNamespaceLister {
	return namingsNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NamingsNamespaceLister helps list and get Namingses.
// All objects returned here must be treated as read-only.
type NamingsNamespaceLister interface {
	// List lists all Namingses in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Namings, err error)
	// Get retrieves the Namings from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Namings, error)
	NamingsNamespaceListerExpansion
}

// namingsNamespaceLister implements the NamingsNamespaceLister
// interface.
type namingsNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Namingses in the indexer for a given namespace.
func (s namingsNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Namings, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Namings))
	})
	return ret, err
}

// Get retrieves the Namings from the indexer for a given namespace and name.
func (s namingsNamespaceLister) Get(name string) (*v1alpha1.Namings, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("namings"), name)
	}
	return obj.(*v1alpha1.Namings), nil
}
