/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-dynatrace-api/apis/application/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DataPrivacyLister helps list DataPrivacies.
// All objects returned here must be treated as read-only.
type DataPrivacyLister interface {
	// List lists all DataPrivacies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DataPrivacy, err error)
	// DataPrivacies returns an object that can list and get DataPrivacies.
	DataPrivacies(namespace string) DataPrivacyNamespaceLister
	DataPrivacyListerExpansion
}

// dataPrivacyLister implements the DataPrivacyLister interface.
type dataPrivacyLister struct {
	indexer cache.Indexer
}

// NewDataPrivacyLister returns a new DataPrivacyLister.
func NewDataPrivacyLister(indexer cache.Indexer) DataPrivacyLister {
	return &dataPrivacyLister{indexer: indexer}
}

// List lists all DataPrivacies in the indexer.
func (s *dataPrivacyLister) List(selector labels.Selector) (ret []*v1alpha1.DataPrivacy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DataPrivacy))
	})
	return ret, err
}

// DataPrivacies returns an object that can list and get DataPrivacies.
func (s *dataPrivacyLister) DataPrivacies(namespace string) DataPrivacyNamespaceLister {
	return dataPrivacyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DataPrivacyNamespaceLister helps list and get DataPrivacies.
// All objects returned here must be treated as read-only.
type DataPrivacyNamespaceLister interface {
	// List lists all DataPrivacies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DataPrivacy, err error)
	// Get retrieves the DataPrivacy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.DataPrivacy, error)
	DataPrivacyNamespaceListerExpansion
}

// dataPrivacyNamespaceLister implements the DataPrivacyNamespaceLister
// interface.
type dataPrivacyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DataPrivacies in the indexer for a given namespace.
func (s dataPrivacyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DataPrivacy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DataPrivacy))
	})
	return ret, err
}

// Get retrieves the DataPrivacy from the indexer for a given namespace and name.
func (s dataPrivacyNamespaceLister) Get(name string) (*v1alpha1.DataPrivacy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("dataprivacy"), name)
	}
	return obj.(*v1alpha1.DataPrivacy), nil
}
