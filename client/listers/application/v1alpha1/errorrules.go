/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-dynatrace-api/apis/application/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ErrorRulesLister helps list ErrorRuleses.
// All objects returned here must be treated as read-only.
type ErrorRulesLister interface {
	// List lists all ErrorRuleses in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ErrorRules, err error)
	// ErrorRuleses returns an object that can list and get ErrorRuleses.
	ErrorRuleses(namespace string) ErrorRulesNamespaceLister
	ErrorRulesListerExpansion
}

// errorRulesLister implements the ErrorRulesLister interface.
type errorRulesLister struct {
	indexer cache.Indexer
}

// NewErrorRulesLister returns a new ErrorRulesLister.
func NewErrorRulesLister(indexer cache.Indexer) ErrorRulesLister {
	return &errorRulesLister{indexer: indexer}
}

// List lists all ErrorRuleses in the indexer.
func (s *errorRulesLister) List(selector labels.Selector) (ret []*v1alpha1.ErrorRules, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ErrorRules))
	})
	return ret, err
}

// ErrorRuleses returns an object that can list and get ErrorRuleses.
func (s *errorRulesLister) ErrorRuleses(namespace string) ErrorRulesNamespaceLister {
	return errorRulesNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ErrorRulesNamespaceLister helps list and get ErrorRuleses.
// All objects returned here must be treated as read-only.
type ErrorRulesNamespaceLister interface {
	// List lists all ErrorRuleses in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ErrorRules, err error)
	// Get retrieves the ErrorRules from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ErrorRules, error)
	ErrorRulesNamespaceListerExpansion
}

// errorRulesNamespaceLister implements the ErrorRulesNamespaceLister
// interface.
type errorRulesNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ErrorRuleses in the indexer for a given namespace.
func (s errorRulesNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ErrorRules, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ErrorRules))
	})
	return ret, err
}

// Get retrieves the ErrorRules from the indexer for a given namespace and name.
func (s errorRulesNamespaceLister) Get(name string) (*v1alpha1.ErrorRules, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("errorrules"), name)
	}
	return obj.(*v1alpha1.ErrorRules), nil
}
