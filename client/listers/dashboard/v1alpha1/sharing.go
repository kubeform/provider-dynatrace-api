/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-dynatrace-api/apis/dashboard/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SharingLister helps list Sharings.
// All objects returned here must be treated as read-only.
type SharingLister interface {
	// List lists all Sharings in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Sharing, err error)
	// Sharings returns an object that can list and get Sharings.
	Sharings(namespace string) SharingNamespaceLister
	SharingListerExpansion
}

// sharingLister implements the SharingLister interface.
type sharingLister struct {
	indexer cache.Indexer
}

// NewSharingLister returns a new SharingLister.
func NewSharingLister(indexer cache.Indexer) SharingLister {
	return &sharingLister{indexer: indexer}
}

// List lists all Sharings in the indexer.
func (s *sharingLister) List(selector labels.Selector) (ret []*v1alpha1.Sharing, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Sharing))
	})
	return ret, err
}

// Sharings returns an object that can list and get Sharings.
func (s *sharingLister) Sharings(namespace string) SharingNamespaceLister {
	return sharingNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SharingNamespaceLister helps list and get Sharings.
// All objects returned here must be treated as read-only.
type SharingNamespaceLister interface {
	// List lists all Sharings in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Sharing, err error)
	// Get retrieves the Sharing from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Sharing, error)
	SharingNamespaceListerExpansion
}

// sharingNamespaceLister implements the SharingNamespaceLister
// interface.
type sharingNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Sharings in the indexer for a given namespace.
func (s sharingNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Sharing, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Sharing))
	})
	return ret, err
}

// Get retrieves the Sharing from the indexer for a given namespace and name.
func (s sharingNamespaceLister) Get(name string) (*v1alpha1.Sharing, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("sharing"), name)
	}
	return obj.(*v1alpha1.Sharing), nil
}
